std <- gfile("Select Profile File...",filter=list("Profile files" = list(patterns = c("*.csv")),"All files"=list(patterns=c("*"))))
if(std != "") {
if(length(grep("\\",std,fixed=TRUE))>0){
mystr<-strsplit(std,split="\\",fixed=T)[[1]]
mystr.lth<-mystr[length(mystr)]
mydir<-substr(std,1,stop=(nchar(std)-nchar(mystr.lth)-1))
setwd(mydir)
}else if(length(grep("/",std,fixed=TRUE))>0){
mystr<-strsplit(std,split="/",fixed=T)[[1]]
mystr.lth<-mystr[length(mystr)]
mydir<-substr(std,1,stop=(nchar(std)-nchar(mystr.lth)-1))
setwd(mydir)
}
samF <- std
#y <- length(grep("_trait",x[,1]))
#z <- x[grep("^_trait$",x[,1]),3]
assign("sfile",samF, envir=.statTarget)
#assign("traitlth",y, envir=.qtlnetworkr)
#assign("traitname",z, envir=.qtlnetworkr)
svalue(widgets$profile) <- samF
}
})
lyout[2,2]<-(widgets$profile<-gedit(text="",cont=lyout))
lyout[3,1]<- gbutton("Stat File...", cont = lyout, handler = function(h,...) {
std <- gfile("Select Stat File...",filter=list("Stat files" = list(patterns = c("*.csv")),"All files"=list(patterns=c("*"))))
if(std != "") {
if(length(grep("\\",std,fixed=TRUE))>0){
mystr<-strsplit(std,split="\\",fixed=T)[[1]]
mystr.lth<-mystr[length(mystr)]
mydir<-substr(std,1,stop=(nchar(std)-nchar(mystr.lth)-1))
setwd(mydir)
}else if(length(grep("/",std,fixed=TRUE))>0){
mystr<-strsplit(std,split="/",fixed=T)[[1]]
mystr.lth<-mystr[length(mystr)]
mydir<-substr(std,1,stop=(nchar(std)-nchar(mystr.lth)-1))
setwd(mydir)
}
stat <- std
#y <- length(grep("_trait",x[,1]))
#z <- x[grep("^_trait$",x[,1]),3]
assign("statfile",stat, envir=.qtlnetworkr)
#assign("traitlth",y, envir=.qtlnetworkr)
#assign("traitname",z, envir=.qtlnetworkr)
svalue(widgets$stat)<-stat
}
})
lyout[3,2]<-(widgets$stat<-gedit(text="",cont=lyout))
#tb = list()
#tb$save <- list(icon="save",handler = function(...) print("save"))
#tb$New <- list(icon="StatTarget Analysis Start ...",handler = function(...) print("StatTarget Analysis Start ..."))
#tb = gtoolbar(tb, cont=gp)
##prepare for data file ready
gl <- glabel("\n StatTarget Analysis\n", container=gp)
font(gl) <- list(weight="normal",color= "navyblue")
nb = gnotebook(cont = gp)
#font(nb) <- list(weight="light", background = "grey90")
shiftco_win = ggroup(horizontal=FALSE, cont=nb, label="Shift Correction")
stat_win =ggroup(horizontal=FALSE, cont=nb, label="Statistical Analysis")
lyout<-glayout(container=shiftco_win)
#font(lyout) <- list(background = "grey90")
lyout[1,1]<-gbutton("MissingValueFilter",cont=lyout)
lyout[1,2]<-(widgets$Frule<-gedit("0.8",cont=lyout))
lyout[2,1]<-gbutton("QC span",cont=lyout)
lyout[2,2]<-(widgets$QCspan<-gedit("0.2",cont=lyout))
lyout[3,1]<-gbutton("Degree",cont=lyout)
lyout[3,2]<-(widgets$degree<-gcombobox(c("2","1","0"),cont=lyout))
lyout[4,1]<-gbutton("Imputation Method",cont=lyout)
lyout[4,2]<-(widgets$imputeM<-gcombobox(c("KNN","min","median"),cont=lyout))
button.group <- ggroup(container = shiftco_win)
## Push buttons to right
addSpring(button.group)
gbutton("Run", handler=function(h,...){
close.cur.dev()
samPeno = svalue(widgets$pheno)
samFile = svalue(widgets$profile)
Frule = svalue(widgets$Frule)
QCspan = svalue(widgets$QCspan)
degree = svalue(widgets$degree)
imputeM = svalue(widgets$imputeM)
shiftCor(samPeno,samFile,Frule = Frule, QCspan = 0.75, degree = 2,imputeM = "KNN")
}, container=button.group)
lyout<-glayout(container=stat_win)
lyout[1,1]<-gbutton("Glog transformation",cont=lyout)
lyout[1,2]<-(widgets$Glog<-gcombobox(c("TRUE","FALSE"),cont=lyout))
lyout[2,1]<-gbutton("Scaling method",cont=lyout)
lyout[2,2]<-(widgets$scalingMethod<-gcombobox(c("Pareto","Auto","Vast","Range"),cont=lyout))
lyout[3,1]<-gbutton("Multi.Test",cont=lyout)
lyout[3,2]<-(widgets$multiTest<-gcombobox(c("TRUE","FALSE"),cont=lyout))
lyout[4,1]<-gbutton("Permutation times",cont=lyout)
lyout[4,2]<-(widgets$Permutation<-gedit("500",cont=lyout))
lyout[5,1]<-gbutton("PCs in Xaxis ",cont=lyout)
lyout[5,2]<-(widgets$pcaX<-gedit("1",cont=lyout))
lyout[6,1]<-gbutton("PCs in Yaxis ",cont=lyout)
lyout[6,2]<-(widgets$pcaY<-gedit("2",cont=lyout))
lyout[7,1]<-gbutton("nvarRF",cont=lyout)
lyout[7,2]<-(widgets$nvarRF<-gedit("50",cont=lyout))
button.group <- ggroup(container = stat_win)
## Push buttons to right
addSpring(button.group)
gbutton("Run", handler=function(h,...){
close.cur.dev()
file = svalue(widgets$stat)
glog = svalue(widgets$Glog)
test.multi = svalue(widgets$multiTest)
nvarRF = svalue(widgets$nvarRF)
scaling = svalue(widgets$scalingMethod)
silt = svalue(widgets$Permutation)
pcax = svalue(widgets$pcaX)
pcay = svalue(widgets$pcaY)
statTarget(file=file, glog=glog, test.multi=test.multi, nvarRF =nvarRF, scaling =scaling,silt = silt, pcax = pcax, pcay = pcay)
}, container=button.group)
}
statTarget()
source('~/Documents/software/testR/GUI.R')
source('~/Documents/software/testR/GUI.R')
source('~/Documents/software/testR/GUI.R')
statTargetGUI()
library(statTarget)
statTargetGUI()
library(statTarget)
statTargetGUI()
library(statTarget)
install.packages("~/Documents/software/Package/statTarget_1.2.0.tar.gz", repos = NULL, type = "source")
library(statTarget)
statTarget.gui()
library(statTarget)
statTarget
?statTarget
library(statTarget)
?statTarget.gui
remove.packages("statTarget")
install.packages("~/Documents/software/Package/statTarget_1.2.0.tar.gz", repos = NULL, type = "source")
library(statTarget)
library(statTarget)
statTarget <- function(){
message(date(), "Start the statTarget GUI session by using 'statTarget.gui()' ")
}
statTarget()
statTarget <- function(){
message(date(), "\nStart the statTarget GUI session by using 'statTarget.gui()' ")
}
statTarget()
source('~/Documents/software/Package/statTarget_v2/R/statTarget-package.R')
?statTarget
library(statTarget)
?statTarget
?statTarget
statTarget.gui
statTarget.gui()
library(statTarget)
install.packages("BiocStyle")
source("https://bioconductor.org/biocLite.R")
biocLite("BiocStyle")
install.packages("Bioconductor")
\documentclass[12pt]{article}
library(statTarget)
source('~/Documents/software/Package/statTarget_v3/R/shiftCor_v2.R')
install.packages("statTarget")
library(statTarget)
citation("statTarget")
source('~/Documents/software/Package/statTarget_v3/R/shiftCor_v2.R')
source('~/Documents/software/Package/statTarget_v3/R/statAnalysis.R')
source('~/Documents/software/Package/statTarget_v3/R/volcano.R')
source('~/Documents/software/Package/statTarget_v3/R/RandomF.R')
?bstatX
source('~/Documents/software/Package/statTarget_v3/R/bStatX.R')
source('~/Documents/software/Package/statTarget_v3/R/loplot_v1.R')
source('~/Documents/software/Package/statTarget_v3/R/rule80.R')
source('~/Documents/software/Package/statTarget_v3/R/rule80.R')
source('~/Documents/software/Package/statTarget_v3/R/odd.ratio.R')
source('~/Documents/software/Package/statTarget_v3/R/odd.ratio.R')
source('~/Documents/software/Package/statTarget_v3/R/odd.ratio.R')
source('~/Documents/software/Package/statTarget_v3/R/plsda.stat.R')
source('~/Documents/software/Package/statTarget_v3/R/plsda.stat.R')
?setMethod
library(ropls)
library(ropls)
?ropls
??ropls
data("sacurine")
attach(sacurine)
opls(dataMatrix)
pca<-opls(dataMatrix)
getScoreMN(pca)
sc <- getScoreMN(pca)
dim(sc)
View(sc)
plot.opls(pca)
ropls::plot.opls(pca)
pca<-opls(dataMatrix,)for(typeC in c("correlation", "outlier", "overview",
"permutation", "predict-train","predict-test",
"summary", "x-loading", "x-score", "x-variance",
"xy-score", "xy-weight")) {
print(typeC)
if(grepl("predict", typeC))
subset <- "odd"
else
subset <- NULL
opLs <- opls(dataMatrix, sampleMetadata[, "gender"],
predI = ifelse(typeC != "xy-weight", 1, 2),
orthoI = ifelse(typeC != "xy-weight", 1, 0),
permI = ifelse(typeC == "permutation", 10, 0),
subset = subset,
printL = FALSE, plotL = FALSE)
plot(opLs, typeVc = typeC)
}
plot(pca)
plot(pca)
plot(opLs, typeVc = typeC)
plot(pca, typeVc = typeC)
plot(pca, typeVc = NULL)
plot(pca, typeVc = c("outlier"))
plot(pca, typeVc = c("overview"))
plot(pca, typeVc = c("permutation"))
plot(pca, typeVc = c("x-score"))
plot(pca, typeVc = c("summary"))
plot(pca, typeVc = c("xy-weight"))
plot(pca, typeVc = c("x-score"),parCompVi = c(1, 2))
plot(pca, typeVc = c("x-score"),parCompVi = c(1, 3))
plot(pca, typeVc = c("x-score"),parCompVi = c(1, 3),parAsColFcVn = T)
plot(pca, typeVc = c("x-score"),parCompVi = c(1, 3),parCexN = 0.1)
f <- c("QC","S","C","2","3")
f
f <- as.factor(f)
f
as.numeric(f)
f
f1 <- as.numeric(f)
f1
?as.numeric
f1 <- as.integer(f)
f1
f
f1 <- as.double(f)
f1
f1<-factor(f,ordered=TRUE)
f1
f1<-factor(f)
f1
f1<-factor(f,labels = c(1,2,3,4,5))
f1
f1@1
f1$1
f1
f
f1<-factor(f,labels = c(1,2,3,4,5))
f1
f
f <- c("QC","S","C","2","3")
f1<-factor(f,labels = c(1,2,3,4,5))
f1
f <- c("QC","S","C","2","3", "S","3")
f
f1<-factor(f,labels = c(1,2,3,4,5))
f1
f
f1<-factor(f,labels = c(1,2,3,4,5),ordered = T)
f1
f1[1]
f <- c("QC","QC","1","1")
f
f1 <- factor(f,labels=;levels)
f1 <- factor(f,labels=levels)
f1 <- factor(f)
f1
f1 <- factor(f,levels = sort(unique(f))
)
f1
f1 <- factor(f,labels = c(seq(length(f),1))
)
length(f)
as.numeric(f)
f1 <- factor(f)
f1
sattus<-factor(f,order=TRUE,levels=c("poor","improved","excellent"))
sattus
f1
f1 <- factor(f)
f1
length(f)
f = c("1","1","2","QC")
f
as.numeric(f)
factor(f)
factor(f,ordered = T)
factor(f,order)
factor(f,order=T
)
as.factor(f,order=T)
x = factor(c(1,2,7,7))
x
unclass(x)
f1 = unclass(x)
f1
f[1]
f
f1 = unclass(f)
f1
f1 = unclass(factor(f)
)
f1
f = c("3","1","2","QC")
f1 = unclass(factor(f))
f1
f1(,1)
f1[,1]
f1[[1]]
f1[[4]]
levels(f1)
f1
levels(f1)[4]
f1[[1]]
f = c("3","1","QC","QC")
f1 = unclass(factor(f))
f1
levels(f1)
levels(f1)[4]
levels(f1)[3]
f1
f1[3]
f1[2]
order(f1)
sorted(f1)
sort(f1)
f1
f2 <- sort(f1)
f2
levels(f2)
f1
f1["2"]
f1$"2"
f
seq_along(f)
data.frame(f,seq_along(f))
f1
f
data.frame(f1,f)
source("http://bioconductor.org/biocLite.R")
biocLite("xcms", dep=T)
library(xcms)
library(multtest)
cdffiles<-c(list.files("/Users/Hees/Downloads/TO HEMI/NEG/a",recursive=FALSE,full.names=TRUE),list.files("/Users/Hees/Downloads/TO HEMI/NEG/b",recursive=FALSE,full.names=TRUE))
cdffiles
xset<-xcmsSet(cdffiles,method="centWave",ppm=2.5,peakwidth=c(5,20),snthresh=3,prefilter=c(3,1000),mzCenterFun="wMean",integrate=1,mzdiff=-0.001,noise=10000,verbose.columns=TRUE,fitgauss=FALSE)
xset
xset2<-retcor(xset,method="obiwarp",profStep=0.1)
xset2
xset2<-group(xset2,bw=2,mzwid=0.015,minfrac=0.5)
xset3<-fillPeaks(xset2)
reporttab<-diffreport(xset3,sortpval=FALSE,"a","b","ab",15000,h=480,w=640)
xset3
cdffiles
cdffiles<-c(list.files("/Users/Hees/Downloads/TO HEMI/NEG/a",recursive=FALSE,full.names=TRUE),list.files("/Users/Hees/Downloads/TO HEMI/NEG/b",recursive=FALSE,full.names=TRUE))
cdffiles
cdffiles<-c(list.files("/Users/Hees/Downloads/TO_HEMI/NEG/a",recursive=FALSE,full.names=TRUE),list.files("/Users/Hees/Downloads/TO_HEMI/NEG/b",recursive=FALSE,full.names=TRUE))
cdffiles
cdffiles<-c(list.files("/Users/Hees/Downloads/TO_HEMI/NEG/a",recursive=FALSE,full.names=TRUE),list.files("/Users/Hees/Downloads/TO_HEMI/NEG/b",recursive=FALSE,full.names=TRUE))
cdffiles
xset<-xcmsSet(cdffiles,method="centWave",ppm=2.5,peakwidth=c(5,20),snthresh=3,prefilter=c(3,1000),mzCenterFun="wMean",integrate=1,mzdiff=-0.001,noise=10000,verbose.columns=TRUE,fitgauss=FALSE)
x se txset
xset
xset2<-retcor(xset,method="obiwarp",profStep=0.1)
xset2
xset2<-group(xset2,bw=2,mzwid=0.015,minfrac=0.5)
xset3<-fillPeaks(xset2)
reporttab<-diffreport(xset3,sortpval=FALSE,"a","b","ab_neg",15000,h=480,w=640)
xset
names(xset)
xset@peaks
xset@peaks[1:10,1:10]
xx <- xset@peaks[,1]
xx
grep("205.*",xx)
write.csv(xx,"xx.csv")
xset<-xcmsSet(cdffiles,method="centWave",ppm=5,peakwidth=c(5,20),snthresh=3,prefilter=c(3,1000),mzCenterFun="wMean",integrate=1,mzdiff=-0.001,noise=10000,verbose.columns=TRUE,fitgauss=FALSE)
xset
xx1 <- xset@peaks[,1]
write.csv(xx1,"xx1.csv")
x <- xcmsRaw(cdffiles[1])
y <- plotEIC(x,c(205.08-205.10))
y <- plotEIC(x,c(205.08-205.10))
x
y <- plotEIC(x,c(205.0901-205.1000))
?plotEIC
y <- getEIC(x,c(205.0901-205.1000))
y <- getEIC(x,mzrange=c(205.0901-205.1000))
y <- plotEIC(x,mzrange=c(205.0901-205.1000))
plotChrom(x)
plotTIC(x)
x
x
plotTIC(x)
cdffiles
library(xcms)
?rector
?retcor
?group
setwd("~/Documents/software/Package/statTarget_v3/R")
library(devtools)
load_all()
document()
check()
?layout
source('~/Documents/software/Package/statTarget_v3/R/work.dir.R')
source('~/Documents/software/Package/statTarget_v3/R/missvalue.R')
source('~/Documents/software/Package/statTarget_v3/R/RandomF.R')
source('~/Documents/software/Package/statTarget_v3/R/statTarget.gui.R')
source('~/Documents/software/Package/statTarget_v3/R/shiftCor_v2.R')
source('~/Documents/software/Package/statTarget_v3/R/statAnalysis.R')
source('~/Documents/software/Package/statTarget_v3/R/welch.R')
source('~/Documents/software/Package/statTarget_v3/R/shiftCor_v2.R')
source('~/Documents/software/Package/statTarget_v3/R/work.dir.R')
setwd("~/Documents/software/Package/statTarget_v3/R")
load_all()
document()
source('~/Documents/software/Package/statTarget_v3/R/work.dir.R')
document()
source('~/Documents/software/Package/statTarget_v3/R/work.dir.R')
setwd("~/Documents/software/Package/statTarget_v3")
load_all()
document()
check()
source('~/Documents/software/Package/statTarget_v3/R/work.dir.R')
setwd("~/Documents/software/Package/statTarget_v3/R")
load_all()
document()
document()
source('~/Documents/software/Package/statTarget_v3/R/work.dir.R')
load_all()
load_all()
document()
check()
source('~/Documents/software/Package/statTarget_v3/R/work.dir.R')
setwd("~/Documents/software/Package/statTarget_v3/R")
load_all()
document()
check()
library(BiocCheck)
source("http://bioconductor.org/biocLite.R")
biocLite("BiocCheck")
library(BiocCheck)
BiocCheck()
setwd("~/Documents/software/Package/statTarget_v3/R")
BiocCheck()
pathToPkg <- file.path("","MyPkg")
BiocCheck(pathToPkg)
pathToPkg <- file.path("","statTarget")
BiocCheck(pathToPkg)
setwd("~/Documents/software/Package/statTarget_v3")
pathToPkg <- file.path("","statTarget")
BiocCheck(pathToPkg)
setwd("~/Documents/software/Package/statTarget_v3/R")
build()
pathToPkg <- file.path("/Users/Hees/Documents/software/Package/"statTarget")
BiocCheck(pathToPkg)
pathToPkg <- file.path("/Users/Hees/Documents/software/Package/","statTarget")
BiocCheck(pathToPkg)
setwd("~/Documents/software/Package")
pathToPkg <- file.path("statTarget_1.2.5.tar.gz")
pathToPkg
BiocCheck(pathToPkg)
source('~/Documents/software/Package/statTarget_v3/R/RandomF.R')
source('~/Documents/software/Package/statTarget_v3/R/bStatX.R')
source('~/Documents/software/Package/statTarget_v3/R/loplot_v1.R')
source('~/Documents/software/Package/statTarget_v3/R/missvalue.R')
source('~/Documents/software/Package/statTarget_v3/R/odd.ratio.R')
source('~/Documents/software/Package/statTarget_v3/R/statAnalysis.R')
setwd("~/Documents/software/Package/statTarget_v3/R")
load_all()
document()
check()
build()
BiocCheck(pathToPkg)
setwd("~/Documents/software/Package")
BiocCheck(pathToPkg)
source('~/Documents/software/Package/statTarget_v3/R/statTarget.gui.R')
?document
?value
？roxygen2
?roxygen2
source('~/Documents/software/Package/statTarget_v3/R/auc.ROC.R')
warnings()
source('~/Documents/software/Package/statTarget_v3/R/auc.ROC.R')
source('~/Documents/software/Package/statTarget_v3/R/box.plot.R')
source('~/Documents/software/Package/statTarget_v3/R/bStatX.R')
source('~/Documents/software/Package/statTarget_v3/R/loplot_v1.R')
source('~/Documents/software/Package/statTarget_v3/R/missvalue.R')
source('~/Documents/software/Package/statTarget_v3/R/odd.ratio.R')
source('~/Documents/software/Package/statTarget_v3/R/plsda.stat.R')
source('~/Documents/software/Package/statTarget_v3/R/pvalues.R')
source('~/Documents/software/Package/statTarget_v3/R/RandomF.R')
source('~/Documents/software/Package/statTarget_v3/R/rule80.R')
source('~/Documents/software/Package/statTarget_v3/R/shapiro.R')
source('~/Documents/software/Package/statTarget_v3/R/shiftCor_v2.R')
source('~/Documents/software/Package/statTarget_v3/R/statAnalysis.R')
source('~/Documents/software/Package/statTarget_v3/R/statTarget-package.R')
source('~/Documents/software/Package/statTarget_v3/R/statTarget.gui.R')
source('~/Documents/software/Package/statTarget_v3/R/volcano.R')
source('~/Documents/software/Package/statTarget_v3/R/welch.R')
source('~/Documents/software/Package/statTarget_v3/R/wmw.R')
setwd("~/Documents/software/Package/statTarget_v3/R")
document()
load_all()
document()
build()
BiocCheck(pathToPkg)
BiocCheck(pathToPkg)
setwd("~/Documents/software/Package")
BiocCheck(pathToPkg)
setwd("~/Documents/software/Package/statTarget_v3/man")
setwd("~/Documents/software/Package/statTarget_v3/R")
?auc.ROC
