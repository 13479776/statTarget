assign("pfile",samP, envir=.statTarget)
#assign("chromosome",y, envir=.qtlnetworkr)
svalue(widgets$pheno) <- samP
}
})
lyout[1,2]<-(widgets$pheno<-gedit(text="",cont=lyout))
lyout[2,1]<- gbutton("Profile File...", cont = lyout, handler = function(h,...) {
std <- gfile("Select Profile File...",filter=list("Profile files" = list(patterns = c("*.csv")),"All files"=list(patterns=c("*"))))
if(std != "") {
if(length(grep("\\",std,fixed=TRUE))>0){
mystr<-strsplit(std,split="\\",fixed=T)[[1]]
mystr.lth<-mystr[length(mystr)]
mydir<-substr(std,1,stop=(nchar(std)-nchar(mystr.lth)-1))
setwd(mydir)
}else if(length(grep("/",std,fixed=TRUE))>0){
mystr<-strsplit(std,split="/",fixed=T)[[1]]
mystr.lth<-mystr[length(mystr)]
mydir<-substr(std,1,stop=(nchar(std)-nchar(mystr.lth)-1))
setwd(mydir)
}
samF <- std
#y <- length(grep("_trait",x[,1]))
#z <- x[grep("^_trait$",x[,1]),3]
assign("sfile",samF, envir=.statTarget)
#assign("traitlth",y, envir=.qtlnetworkr)
#assign("traitname",z, envir=.qtlnetworkr)
svalue(widgets$profile) <- samF
}
})
lyout[2,2]<-(widgets$profile<-gedit(text="",cont=lyout))
lyout[3,1]<- gbutton("Stat File...", cont = lyout, handler = function(h,...) {
std <- gfile("Select Stat File...",filter=list("Stat files" = list(patterns = c("*.csv")),"All files"=list(patterns=c("*"))))
if(std != "") {
if(length(grep("\\",std,fixed=TRUE))>0){
mystr<-strsplit(std,split="\\",fixed=T)[[1]]
mystr.lth<-mystr[length(mystr)]
mydir<-substr(std,1,stop=(nchar(std)-nchar(mystr.lth)-1))
setwd(mydir)
}else if(length(grep("/",std,fixed=TRUE))>0){
mystr<-strsplit(std,split="/",fixed=T)[[1]]
mystr.lth<-mystr[length(mystr)]
mydir<-substr(std,1,stop=(nchar(std)-nchar(mystr.lth)-1))
setwd(mydir)
}
stat <- std
#y <- length(grep("_trait",x[,1]))
#z <- x[grep("^_trait$",x[,1]),3]
assign("statfile",stat, envir=.qtlnetworkr)
#assign("traitlth",y, envir=.qtlnetworkr)
#assign("traitname",z, envir=.qtlnetworkr)
svalue(widgets$stat)<-stat
}
})
lyout[3,2]<-(widgets$stat<-gedit(text="",cont=lyout))
#tb = list()
#tb$save <- list(icon="save",handler = function(...) print("save"))
#tb$New <- list(icon="StatTarget Analysis Start ...",handler = function(...) print("StatTarget Analysis Start ..."))
#tb = gtoolbar(tb, cont=gp)
##prepare for data file ready
gl <- glabel("\n StatTarget Analysis\n", container=gp)
font(gl) <- list(weight="normal",color= "navyblue")
nb = gnotebook(cont = gp)
#font(nb) <- list(weight="light", background = "grey90")
shiftco_win = ggroup(horizontal=FALSE, cont=nb, label="Shift Correction")
stat_win =ggroup(horizontal=FALSE, cont=nb, label="Statistical Analysis")
lyout<-glayout(container=shiftco_win)
#font(lyout) <- list(background = "grey90")
lyout[1,1]<-gbutton("MissingValueFilter",cont=lyout)
lyout[1,2]<-(widgets$Frule<-gedit("0.8",cont=lyout))
lyout[2,1]<-gbutton("QC span",cont=lyout)
lyout[2,2]<-(widgets$QCspan<-gedit("0.2",cont=lyout))
lyout[3,1]<-gbutton("Degree",cont=lyout)
lyout[3,2]<-(widgets$degree<-gcombobox(c("2","1","0"),cont=lyout))
lyout[4,1]<-gbutton("Imputation Method",cont=lyout)
lyout[4,2]<-(widgets$imputeM<-gcombobox(c("KNN","min","median"),cont=lyout))
button.group <- ggroup(container = shiftco_win)
## Push buttons to right
addSpring(button.group)
gbutton("Run", handler=function(h,...){
close.cur.dev()
samPeno = svalue(widgets$pheno)
samFile = svalue(widgets$profile)
Frule = svalue(widgets$Frule)
QCspan = svalue(widgets$QCspan)
degree = svalue(widgets$degree)
imputeM = svalue(widgets$imputeM)
shiftCor(samPeno,samFile,Frule = Frule, QCspan = 0.75, degree = 2,imputeM = "KNN")
}, container=button.group)
lyout<-glayout(container=stat_win)
lyout[1,1]<-gbutton("Glog transformation",cont=lyout)
lyout[1,2]<-(widgets$Glog<-gcombobox(c("TRUE","FALSE"),cont=lyout))
lyout[2,1]<-gbutton("Scaling method",cont=lyout)
lyout[2,2]<-(widgets$scalingMethod<-gcombobox(c("Pareto","Auto","Vast","Range"),cont=lyout))
lyout[3,1]<-gbutton("Multi.Test",cont=lyout)
lyout[3,2]<-(widgets$multiTest<-gcombobox(c("TRUE","FALSE"),cont=lyout))
lyout[4,1]<-gbutton("Permutation times",cont=lyout)
lyout[4,2]<-(widgets$Permutation<-gedit("500",cont=lyout))
lyout[5,1]<-gbutton("PCs in Xaxis ",cont=lyout)
lyout[5,2]<-(widgets$pcaX<-gedit("1",cont=lyout))
lyout[6,1]<-gbutton("PCs in Yaxis ",cont=lyout)
lyout[6,2]<-(widgets$pcaY<-gedit("2",cont=lyout))
lyout[7,1]<-gbutton("nvarRF",cont=lyout)
lyout[7,2]<-(widgets$nvarRF<-gedit("50",cont=lyout))
button.group <- ggroup(container = stat_win)
## Push buttons to right
addSpring(button.group)
gbutton("Run", handler=function(h,...){
close.cur.dev()
file = svalue(widgets$stat)
glog = svalue(widgets$Glog)
test.multi = svalue(widgets$multiTest)
nvarRF = svalue(widgets$nvarRF)
scaling = svalue(widgets$scalingMethod)
silt = svalue(widgets$Permutation)
pcax = svalue(widgets$pcaX)
pcay = svalue(widgets$pcaY)
statTarget(file=file, glog=glog, test.multi=test.multi, nvarRF =nvarRF, scaling =scaling,silt = silt, pcax = pcax, pcay = pcay)
}, container=button.group)
##MIPlot over
source('~/Documents/software/testR/GUI.R')
#`QTLNetworkR` <-function(){
#library(gWidgets)
#library(gWidgetsRGtk2)
.statTarget <- new.env()
color<-colors()
#cl<-color[c(552,26,254,32,47,68,73,81,84,100,142,362,372,536,541,547,455,445)]#,0:20*5+152,133)]
linetype<-c("solid","dashed","dotted","dotdash","longdash","twodash","F8","431313","22848222")
linetype<-rep(linetype,4)
#assign("traitlth",NA, envir=.qtlnetworkr)
#assign("traitname",NA, envir=.qtlnetworkr)
#assign("chromosome",NA, envir=.qtlnetworkr)
widgets<-list()
win = gwindow("Wellcome to statTarget")#, width=700, height=400)
#gf <- gframe("frame", horizontal=FALSE, container=win)
#font(win) <- list(weight="light", color = "red")
gp = ggroup(horizontal=FALSE, container=win, expand=TRUE)  # main group
Quit <- gbutton("Quit",container=gp,handler = function(h,...) {dispose(win)})
gl <- glabel("\n劝君今夜须沉醉,尊前莫话明朝事. 珍重主人心, 酒深情亦深. \n须愁春漏短, 莫诉金杯满. 遇酒且呵呵, 人生能几何!\n", container=gp)
#font(gl) <- list()
#font(gl) <- list(weight="light", background = "red")
#gl = gtext(gl, container=gp, font.attr=list(background="red"))
#gf = gframe(horizontal=FALSE, cont=win, expand=TRUE)
#svalue(gp) <- 0
tmp <- gframe("Files", container=gp, expand=TRUE)
lyout<-glayout(container=tmp)
#font(lyout) <- list(background = "grey90")
lyout[1,1]<-gbutton("Pheno File...", cont=lyout,
handler = function(h,...) {
std<-gfile(text="Select Pheno File...",filter=list("Pheno files" = list(patterns = c("*.csv")),"All files"=list(patterns=c("*"))))
if(std != "")
{
if(length(grep("\\",std,fixed=TRUE))>0){
mystr<-strsplit(std,split="\\",fixed=T)[[1]]
mystr.lth<-mystr[length(mystr)]
mydir<-substr(std,1,stop=(nchar(std)-nchar(mystr.lth)-1))
setwd(mydir)
}else if(length(grep("/",std,fixed=TRUE))>0){
mystr<-strsplit(std,split="/",fixed=T)[[1]]
mystr.lth<-mystr[length(mystr)]
mydir<-substr(std,1,stop=(nchar(std)-nchar(mystr.lth)-1))
setwd(mydir)
}
samP <- std
#y <- 1:as.numeric(x[grep("_c|Chromosome",x[,1]),2])
assign("pfile",samP, envir=.statTarget)
#assign("chromosome",y, envir=.qtlnetworkr)
svalue(widgets$pheno) <- samP
}
})
lyout[1,2]<-(widgets$pheno<-gedit(text="",cont=lyout))
lyout[2,1]<- gbutton("Profile File...", cont = lyout, handler = function(h,...) {
std <- gfile("Select Profile File...",filter=list("Profile files" = list(patterns = c("*.csv")),"All files"=list(patterns=c("*"))))
if(std != "") {
if(length(grep("\\",std,fixed=TRUE))>0){
mystr<-strsplit(std,split="\\",fixed=T)[[1]]
mystr.lth<-mystr[length(mystr)]
mydir<-substr(std,1,stop=(nchar(std)-nchar(mystr.lth)-1))
setwd(mydir)
}else if(length(grep("/",std,fixed=TRUE))>0){
mystr<-strsplit(std,split="/",fixed=T)[[1]]
mystr.lth<-mystr[length(mystr)]
mydir<-substr(std,1,stop=(nchar(std)-nchar(mystr.lth)-1))
setwd(mydir)
}
samF <- std
#y <- length(grep("_trait",x[,1]))
#z <- x[grep("^_trait$",x[,1]),3]
assign("sfile",samF, envir=.statTarget)
#assign("traitlth",y, envir=.qtlnetworkr)
#assign("traitname",z, envir=.qtlnetworkr)
svalue(widgets$profile) <- samF
}
})
lyout[2,2]<-(widgets$profile<-gedit(text="",cont=lyout))
lyout[3,1]<- gbutton("Stat File...", cont = lyout, handler = function(h,...) {
std <- gfile("Select Stat File...",filter=list("Stat files" = list(patterns = c("*.csv")),"All files"=list(patterns=c("*"))))
if(std != "") {
if(length(grep("\\",std,fixed=TRUE))>0){
mystr<-strsplit(std,split="\\",fixed=T)[[1]]
mystr.lth<-mystr[length(mystr)]
mydir<-substr(std,1,stop=(nchar(std)-nchar(mystr.lth)-1))
setwd(mydir)
}else if(length(grep("/",std,fixed=TRUE))>0){
mystr<-strsplit(std,split="/",fixed=T)[[1]]
mystr.lth<-mystr[length(mystr)]
mydir<-substr(std,1,stop=(nchar(std)-nchar(mystr.lth)-1))
setwd(mydir)
}
stat <- std
#y <- length(grep("_trait",x[,1]))
#z <- x[grep("^_trait$",x[,1]),3]
assign("statfile",stat, envir=.qtlnetworkr)
#assign("traitlth",y, envir=.qtlnetworkr)
#assign("traitname",z, envir=.qtlnetworkr)
svalue(widgets$stat)<-stat
}
})
lyout[3,2]<-(widgets$stat<-gedit(text="",cont=lyout))
#tb = list()
#tb$save <- list(icon="save",handler = function(...) print("save"))
#tb$New <- list(icon="StatTarget Analysis Start ...",handler = function(...) print("StatTarget Analysis Start ..."))
#tb = gtoolbar(tb, cont=gp)
##prepare for data file ready
gl <- glabel("\n StatTarget Analysis\n", container=gp)
font(gl) <- list(weight="normal",color= "navyblue")
nb = gnotebook(cont = gp)
#font(nb) <- list(weight="light", background = "grey90")
shiftco_win = ggroup(horizontal=FALSE, cont=nb, label="Shift Correction")
stat_win =ggroup(horizontal=FALSE, cont=nb, label="Statistical Analysis")
lyout<-glayout(container=shiftco_win)
#font(lyout) <- list(background = "grey90")
lyout[1,1]<-gbutton("MissingValueFilter",cont=lyout)
lyout[1,2]<-(widgets$Frule<-gedit("0.8",cont=lyout))
lyout[2,1]<-gbutton("QC span",cont=lyout)
lyout[2,2]<-(widgets$QCspan<-gedit("0.2",cont=lyout))
lyout[3,1]<-gbutton("Degree",cont=lyout)
lyout[3,2]<-(widgets$degree<-gcombobox(c("2","1","0"),cont=lyout))
lyout[4,1]<-gbutton("Imputation Method",cont=lyout)
lyout[4,2]<-(widgets$imputeM<-gcombobox(c("KNN","min","median"),cont=lyout))
button.group <- ggroup(container = shiftco_win)
## Push buttons to right
addSpring(button.group)
gbutton("Run", handler=function(h,...){
close.cur.dev()
samPeno = svalue(widgets$pheno)
samFile = svalue(widgets$profile)
Frule = svalue(widgets$Frule)
QCspan = svalue(widgets$QCspan)
degree = svalue(widgets$degree)
imputeM = svalue(widgets$imputeM)
shiftCor(samPeno,samFile,Frule = Frule, QCspan = 0.75, degree = 2,imputeM = "KNN")
}, container=button.group)
lyout<-glayout(container=stat_win)
lyout[1,1]<-gbutton("Glog transformation",cont=lyout)
lyout[1,2]<-(widgets$Glog<-gcombobox(c("TRUE","FALSE"),cont=lyout))
lyout[2,1]<-gbutton("Scaling method",cont=lyout)
lyout[2,2]<-(widgets$scalingMethod<-gcombobox(c("Pareto","Auto","Vast","Range"),cont=lyout))
lyout[3,1]<-gbutton("Multi.Test",cont=lyout)
lyout[3,2]<-(widgets$multiTest<-gcombobox(c("TRUE","FALSE"),cont=lyout))
lyout[4,1]<-gbutton("Permutation times",cont=lyout)
lyout[4,2]<-(widgets$Permutation<-gedit("500",cont=lyout))
lyout[5,1]<-gbutton("PCs in Xaxis ",cont=lyout)
lyout[5,2]<-(widgets$pcaX<-gedit("1",cont=lyout))
lyout[6,1]<-gbutton("PCs in Yaxis ",cont=lyout)
lyout[6,2]<-(widgets$pcaY<-gedit("2",cont=lyout))
lyout[7,1]<-gbutton("nvarRF",cont=lyout)
lyout[7,2]<-(widgets$nvarRF<-gedit("50",cont=lyout))
button.group <- ggroup(container = stat_win)
## Push buttons to right
addSpring(button.group)
gbutton("Run", handler=function(h,...){
close.cur.dev()
file = svalue(widgets$stat)
glog = svalue(widgets$Glog)
test.multi = svalue(widgets$multiTest)
nvarRF = svalue(widgets$nvarRF)
scaling = svalue(widgets$scalingMethod)
silt = svalue(widgets$Permutation)
pcax = svalue(widgets$pcaX)
pcay = svalue(widgets$pcaY)
statTarget(file=file, glog=glog, test.multi=test.multi, nvarRF =nvarRF, scaling =scaling,silt = silt, pcax = pcax, pcay = pcay)
}, container=button.group)
##MIPlot over
source("/Users/Hees/Documents/software/testR/GUI.R")
statTarget <-function(){
require(gWidgets)
require(gWidgetsRGtk2)
.statTarget <- new.env()
color<-colors()
#cl<-color[c(552,26,254,32,47,68,73,81,84,100,142,362,372,536,541,547,455,445)]#,0:20*5+152,133)]
linetype<-c("solid","dashed","dotted","dotdash","longdash","twodash","F8","431313","22848222")
linetype<-rep(linetype,4)
#assign("traitlth",NA, envir=.qtlnetworkr)
#assign("traitname",NA, envir=.qtlnetworkr)
#assign("chromosome",NA, envir=.qtlnetworkr)
widgets<-list()
win = gwindow("Wellcome to statTarget")#, width=700, height=400)
#gf <- gframe("frame", horizontal=FALSE, container=win)
#font(win) <- list(weight="light", color = "red")
gp = ggroup(horizontal=FALSE, container=win, expand=TRUE)  # main group
Quit <- gbutton("Quit",container=gp,handler = function(h,...) {dispose(win)})
gl <- glabel("\n劝君今夜须沉醉,尊前莫话明朝事. 珍重主人心, 酒深情亦深. \n须愁春漏短, 莫诉金杯满. 遇酒且呵呵, 人生能几何!\n", container=gp)
#font(gl) <- list()
#font(gl) <- list(weight="light", background = "red")
#gl = gtext(gl, container=gp, font.attr=list(background="red"))
#gf = gframe(horizontal=FALSE, cont=win, expand=TRUE)
#svalue(gp) <- 0
tmp <- gframe("Files", container=gp, expand=TRUE)
lyout<-glayout(container=tmp)
#font(lyout) <- list(background = "grey90")
lyout[1,1]<-gbutton("Pheno File...", cont=lyout,
handler = function(h,...) {
std<-gfile(text="Select Pheno File...",filter=list("Pheno files" = list(patterns = c("*.csv")),"All files"=list(patterns=c("*"))))
if(std != "")
{
if(length(grep("\\",std,fixed=TRUE))>0){
mystr<-strsplit(std,split="\\",fixed=T)[[1]]
mystr.lth<-mystr[length(mystr)]
mydir<-substr(std,1,stop=(nchar(std)-nchar(mystr.lth)-1))
setwd(mydir)
}else if(length(grep("/",std,fixed=TRUE))>0){
mystr<-strsplit(std,split="/",fixed=T)[[1]]
mystr.lth<-mystr[length(mystr)]
mydir<-substr(std,1,stop=(nchar(std)-nchar(mystr.lth)-1))
setwd(mydir)
}
samP <- std
#y <- 1:as.numeric(x[grep("_c|Chromosome",x[,1]),2])
assign("pfile",samP, envir=.statTarget)
#assign("chromosome",y, envir=.qtlnetworkr)
svalue(widgets$pheno) <- samP
}
})
lyout[1,2]<-(widgets$pheno<-gedit(text="",cont=lyout))
lyout[2,1]<- gbutton("Profile File...", cont = lyout, handler = function(h,...) {
std <- gfile("Select Profile File...",filter=list("Profile files" = list(patterns = c("*.csv")),"All files"=list(patterns=c("*"))))
if(std != "") {
if(length(grep("\\",std,fixed=TRUE))>0){
mystr<-strsplit(std,split="\\",fixed=T)[[1]]
mystr.lth<-mystr[length(mystr)]
mydir<-substr(std,1,stop=(nchar(std)-nchar(mystr.lth)-1))
setwd(mydir)
}else if(length(grep("/",std,fixed=TRUE))>0){
mystr<-strsplit(std,split="/",fixed=T)[[1]]
mystr.lth<-mystr[length(mystr)]
mydir<-substr(std,1,stop=(nchar(std)-nchar(mystr.lth)-1))
setwd(mydir)
}
samF <- std
#y <- length(grep("_trait",x[,1]))
#z <- x[grep("^_trait$",x[,1]),3]
assign("sfile",samF, envir=.statTarget)
#assign("traitlth",y, envir=.qtlnetworkr)
#assign("traitname",z, envir=.qtlnetworkr)
svalue(widgets$profile) <- samF
}
})
lyout[2,2]<-(widgets$profile<-gedit(text="",cont=lyout))
lyout[3,1]<- gbutton("Stat File...", cont = lyout, handler = function(h,...) {
std <- gfile("Select Stat File...",filter=list("Stat files" = list(patterns = c("*.csv")),"All files"=list(patterns=c("*"))))
if(std != "") {
if(length(grep("\\",std,fixed=TRUE))>0){
mystr<-strsplit(std,split="\\",fixed=T)[[1]]
mystr.lth<-mystr[length(mystr)]
mydir<-substr(std,1,stop=(nchar(std)-nchar(mystr.lth)-1))
setwd(mydir)
}else if(length(grep("/",std,fixed=TRUE))>0){
mystr<-strsplit(std,split="/",fixed=T)[[1]]
mystr.lth<-mystr[length(mystr)]
mydir<-substr(std,1,stop=(nchar(std)-nchar(mystr.lth)-1))
setwd(mydir)
}
stat <- std
#y <- length(grep("_trait",x[,1]))
#z <- x[grep("^_trait$",x[,1]),3]
assign("statfile",stat, envir=.qtlnetworkr)
#assign("traitlth",y, envir=.qtlnetworkr)
#assign("traitname",z, envir=.qtlnetworkr)
svalue(widgets$stat)<-stat
}
})
lyout[3,2]<-(widgets$stat<-gedit(text="",cont=lyout))
#tb = list()
#tb$save <- list(icon="save",handler = function(...) print("save"))
#tb$New <- list(icon="StatTarget Analysis Start ...",handler = function(...) print("StatTarget Analysis Start ..."))
#tb = gtoolbar(tb, cont=gp)
##prepare for data file ready
gl <- glabel("\n StatTarget Analysis\n", container=gp)
font(gl) <- list(weight="normal",color= "navyblue")
nb = gnotebook(cont = gp)
#font(nb) <- list(weight="light", background = "grey90")
shiftco_win = ggroup(horizontal=FALSE, cont=nb, label="Shift Correction")
stat_win =ggroup(horizontal=FALSE, cont=nb, label="Statistical Analysis")
lyout<-glayout(container=shiftco_win)
#font(lyout) <- list(background = "grey90")
lyout[1,1]<-gbutton("MissingValueFilter",cont=lyout)
lyout[1,2]<-(widgets$Frule<-gedit("0.8",cont=lyout))
lyout[2,1]<-gbutton("QC span",cont=lyout)
lyout[2,2]<-(widgets$QCspan<-gedit("0.2",cont=lyout))
lyout[3,1]<-gbutton("Degree",cont=lyout)
lyout[3,2]<-(widgets$degree<-gcombobox(c("2","1","0"),cont=lyout))
lyout[4,1]<-gbutton("Imputation Method",cont=lyout)
lyout[4,2]<-(widgets$imputeM<-gcombobox(c("KNN","min","median"),cont=lyout))
button.group <- ggroup(container = shiftco_win)
## Push buttons to right
addSpring(button.group)
gbutton("Run", handler=function(h,...){
close.cur.dev()
samPeno = svalue(widgets$pheno)
samFile = svalue(widgets$profile)
Frule = svalue(widgets$Frule)
QCspan = svalue(widgets$QCspan)
degree = svalue(widgets$degree)
imputeM = svalue(widgets$imputeM)
shiftCor(samPeno,samFile,Frule = Frule, QCspan = 0.75, degree = 2,imputeM = "KNN")
}, container=button.group)
lyout<-glayout(container=stat_win)
lyout[1,1]<-gbutton("Glog transformation",cont=lyout)
lyout[1,2]<-(widgets$Glog<-gcombobox(c("TRUE","FALSE"),cont=lyout))
lyout[2,1]<-gbutton("Scaling method",cont=lyout)
lyout[2,2]<-(widgets$scalingMethod<-gcombobox(c("Pareto","Auto","Vast","Range"),cont=lyout))
lyout[3,1]<-gbutton("Multi.Test",cont=lyout)
lyout[3,2]<-(widgets$multiTest<-gcombobox(c("TRUE","FALSE"),cont=lyout))
lyout[4,1]<-gbutton("Permutation times",cont=lyout)
lyout[4,2]<-(widgets$Permutation<-gedit("500",cont=lyout))
lyout[5,1]<-gbutton("PCs in Xaxis ",cont=lyout)
lyout[5,2]<-(widgets$pcaX<-gedit("1",cont=lyout))
lyout[6,1]<-gbutton("PCs in Yaxis ",cont=lyout)
lyout[6,2]<-(widgets$pcaY<-gedit("2",cont=lyout))
lyout[7,1]<-gbutton("nvarRF",cont=lyout)
lyout[7,2]<-(widgets$nvarRF<-gedit("50",cont=lyout))
button.group <- ggroup(container = stat_win)
## Push buttons to right
addSpring(button.group)
gbutton("Run", handler=function(h,...){
close.cur.dev()
file = svalue(widgets$stat)
glog = svalue(widgets$Glog)
test.multi = svalue(widgets$multiTest)
nvarRF = svalue(widgets$nvarRF)
scaling = svalue(widgets$scalingMethod)
silt = svalue(widgets$Permutation)
pcax = svalue(widgets$pcaX)
pcay = svalue(widgets$pcaY)
statTarget(file=file, glog=glog, test.multi=test.multi, nvarRF =nvarRF, scaling =scaling,silt = silt, pcax = pcax, pcay = pcay)
}, container=button.group)
}
statTarget()
source('~/Documents/software/testR/GUI.R')
source('~/Documents/software/testR/GUI.R')
source('~/Documents/software/testR/GUI.R')
statTargetGUI()
library(statTarget)
statTargetGUI()
library(statTarget)
statTargetGUI()
library(statTarget)
install.packages("~/Documents/software/Package/statTarget_1.2.0.tar.gz", repos = NULL, type = "source")
library(statTarget)
statTarget.gui()
library(statTarget)
statTarget
?statTarget
library(statTarget)
?statTarget.gui
remove.packages("statTarget")
install.packages("~/Documents/software/Package/statTarget_1.2.0.tar.gz", repos = NULL, type = "source")
library(statTarget)
library(statTarget)
statTarget <- function(){
message(date(), "Start the statTarget GUI session by using 'statTarget.gui()' ")
}
statTarget()
statTarget <- function(){
message(date(), "\nStart the statTarget GUI session by using 'statTarget.gui()' ")
}
statTarget()
source('~/Documents/software/Package/statTarget_v2/R/statTarget-package.R')
?statTarget
library(statTarget)
?statTarget
?statTarget
statTarget.gui
statTarget.gui()
library(statTarget)
install.packages("BiocStyle")
source("https://bioconductor.org/biocLite.R")
biocLite("BiocStyle")
install.packages("Bioconductor")
\documentclass[12pt]{article}
library(statTarget)
remove.packages("statTarget")
setwd("~/Documents/software/Package/statTarget_v2/R")
library(devtools)
load_all()
document()
check()
source('~/Documents/software/Package/statTarget_v2/tests/testthat.R')
check()
build()
citation (package = "rJava" )
setwd("~/Documents/software/Package/statTarget_v2/inst/doc")
tools::compactPDF("statTarget.pdf", gs_quality="ebook")
tools::compactPDF("statTarget.pdf", gs_quality="ebook")
build_vignettes()
check()
build_win()
build_vignettes()
check()
check()
build_win()
build()
